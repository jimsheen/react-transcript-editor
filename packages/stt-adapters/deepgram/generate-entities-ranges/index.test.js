import generateEntitiesRanges from "./index";

const exampleWords = [
  {
    word: "hello",
    start: 0.9774074,
    end: 1.2965608,
    confidence: 0.94534373,
    punctuated_word: "Hello",
  },
  {
    word: "everyone",
    start: 1.2965608,
    end: 1.6556084,
    confidence: 0.9984865,
    punctuated_word: "everyone.",
  },
  {
    word: "welcome",
    start: 1.8550793,
    end: 2.1343386,
    confidence: 0.99993694,
    punctuated_word: "Welcome",
  },
  {
    word: "to",
    start: 2.1343386,
    end: 2.1742327,
    confidence: 0.99886984,
    punctuated_word: "to",
  },
  {
    word: "premiere",
    start: 2.2939153,
    end: 2.692857,
    confidence: 0.5996044,
    punctuated_word: "Premiere",
  },
];

// ignoring autogenerated id
// see" 2. Ignoring values, relative to current time"
// https://medium.com/@boriscoder/the-hidden-power-of-jest-matchers-f3d86d8101b0
const expectedValue = [
  {
    start: 0.9774074,
    end: 1.2965608,
    confidence: 0.94534373,
    text: "Hello",
    offset: 0,
    length: 5,
    key: expect.any(String),
  },
  {
    start: 13.17,
    end: 13.38,
    confidence: 0.61,
    text: "is",
    offset: 6,
    length: 2,
    key: expect.any(String), // "xuyej3b"
  },
  {
    start: 13.38,
    end: 13.44,
    confidence: 0.99,
    text: "a",
    offset: 9,
    length: 1,
    key: expect.any(String), // "8fyva5"
  },
  {
    start: 13.44,
    end: 13.86,
    confidence: 1,
    text: "day.",
    offset: 11,
    length: 4,
    key: expect.any(String), // "ss8pm4p"
  },
];

describe("Generate Entity Ranges", () => {
  const result = generateEntitiesRanges(exampleWords, "punctuated_word");
  const resultFirstElement = result[0];
  it("Should be defined", () => {
    expect(result).toBeDefined();
  });

  it("Should return a list of entities", () => {
    expect(result).toEqual(expectedValue);
  });
  it("Should have expected attributes", () => {
    expect(resultFirstElement).toHaveProperty("start");
    expect(resultFirstElement).toHaveProperty("end");
    expect(resultFirstElement).toHaveProperty("confidence");
    expect(resultFirstElement).toHaveProperty("text");
    expect(resultFirstElement).toHaveProperty("offset");
    expect(resultFirstElement).toHaveProperty("length");
    expect(resultFirstElement).toHaveProperty("key");
  });

  it("Should return a list of entities", () => {
    expect(typeof resultFirstElement.key).toBe("string");
  });
});
